// chatMonitor.ts
import * as vscode from "vscode";

export interface ChatMonitorConfig {
  /** –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —á–∞—Ç–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö */
  checkInterval: number;
  /** –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö */
  pauseThreshold: number;
  /** –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–∞—É–∑—ã */
  continueMessage: string;
  /** –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ */
  enableLogging: boolean;
}

export class ChatMonitor {
  private checkInterval?: NodeJS.Timeout;
  private lastChatContent?: string;
  private lastChangeTime: number = Date.now();
  private isMonitoring = false;
  private config: ChatMonitorConfig;

  constructor(
    private context: vscode.ExtensionContext,
    config: ChatMonitorConfig
  ) {
    this.config = config;
  }

  private log(message: string) {
    if (this.config.enableLogging) {
      console.log(`[ChatMonitor] ${message}`);
    }
  }

  public start(): void {
    if (this.isMonitoring) {
      this.log("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }

    this.isMonitoring = true;
    this.lastChangeTime = Date.now();
    this.lastChatContent = undefined;

    this.log(
      `–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–∞—Ç–∞. –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${this.config.checkInterval}—Å, –ø–æ—Ä–æ–≥ –ø–∞—É–∑—ã: ${this.config.pauseThreshold}—Å`
    );

    this.checkInterval = setInterval(() => {
      this.checkChatChanges();
    }, this.config.checkInterval * 1000);

    vscode.window.showInformationMessage("ü§ñ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–∞ –∑–∞–ø—É—â–µ–Ω");
  }

  public stop(): void {
    if (!this.isMonitoring) {
      this.log("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
      return;
    }

    this.isMonitoring = false;

    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = undefined;
    }

    this.log("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    vscode.window.showInformationMessage("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  }

  public updateConfig(newConfig: ChatMonitorConfig): void {
    const wasMonitoring = this.isMonitoring;

    if (wasMonitoring) {
      this.stop();
    }

    this.config = newConfig;

    if (wasMonitoring) {
      this.start();
    }

    this.log("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
  }

  private async checkChatChanges(): Promise<void> {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –≤ –ø–∞–º—è—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      const tempUri = vscode.Uri.file(
        this.context.globalStorageUri?.fsPath + "/temp-chat-export.json" ||
          "/tmp/temp-chat-export.json"
      );

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å workbench.action.chat.export —Å –ø—É—Ç–µ–º
      await vscode.commands.executeCommand(
        "workbench.action.chat.export",
        tempUri
      );

      // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–µ–∑ VS Code API
      try {
        const fileData = await vscode.workspace.fs.readFile(tempUri);
        const chatContent = Buffer.from(fileData).toString("utf8");

        this.log(
          `–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–∞—Ç–∞. –†–∞–∑–º–µ—Ä: ${chatContent.length} —Å–∏–º–≤–æ–ª–æ–≤`
        );

        if (this.lastChatContent === undefined) {
          // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
          this.lastChatContent = chatContent;
          this.lastChangeTime = Date.now();
          this.log("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ");
          return;
        }

        if (this.lastChatContent !== chatContent) {
          // –ß–∞—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
          this.lastChatContent = chatContent;
          this.lastChangeTime = Date.now();
          this.log("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —á–∞—Ç–µ");
          return;
        }

        // –ß–∞—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–∞—É–∑—ã
        const timeSinceLastChange = (Date.now() - this.lastChangeTime) / 1000;
        this.log(`–ß–∞—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è —É–∂–µ ${timeSinceLastChange.toFixed(1)}—Å`);

        if (timeSinceLastChange >= this.config.pauseThreshold) {
          this.log(
            `–ü–∞—É–∑–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ø–æ—Ä–æ–≥ (${this.config.pauseThreshold}—Å), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ`
          );
          await this.sendContinueMessage();
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
          this.lastChangeTime = Date.now();
        }

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try {
          await vscode.workspace.fs.delete(tempUri);
        } catch (deleteError) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        }
      } catch (readError) {
        this.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: ${readError}`);
        // –í–æ–∑–º–æ–∂–Ω–æ, —á–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
      }
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–∞—Ç–∞: ${error}`);

      // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      if (
        error instanceof Error &&
        (error.message.includes("command") ||
          error.message.includes("not found"))
      ) {
        vscode.window.showWarningMessage(
          "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ workbench.action.chat.export –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ VS Code. –û–±–Ω–æ–≤–∏—Ç–µ VS Code –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ (1.95+)."
        );
        this.stop();
      }
    }
  }

  private async sendContinueMessage(): Promise<void> {
    try {
      this.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: "${this.config.continueMessage}"`);
      await vscode.commands.executeCommand(
        "workbench.action.chat.open",
        this.config.continueMessage
      );

      vscode.window.showInformationMessage(
        `üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç: "${this.config.continueMessage}"`
      );
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`);
    }
  }

  public isActive(): boolean {
    return this.isMonitoring;
  }

  public getStatus(): string {
    if (!this.isMonitoring) {
      return "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω";
    }

    const timeSinceLastChange = (Date.now() - this.lastChangeTime) / 1000;
    return `–ê–∫—Ç–∏–≤–µ–Ω (${timeSinceLastChange.toFixed(
      0
    )}—Å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è)`;
  }

  public dispose(): void {
    this.stop();
  }
}
