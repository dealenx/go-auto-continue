// extension.ts
import * as vscode from "vscode";

let continueInterval: NodeJS.Timeout | undefined;
let isRunning = false;
let treeDataProvider: AutoContinueTreeProvider;
let messageCount = 0;
let startTime: Date | undefined;

export function activate(context: vscode.ExtensionContext) {
  console.log("Auto Continue extension activated");

  // –°–æ–∑–¥–∞—Ç—å Tree View Provider
  treeDataProvider = new AutoContinueTreeProvider();
  vscode.window.createTreeView("autoContinueView", {
    treeDataProvider: treeDataProvider,
  });

  // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–º
  const startCommand = vscode.commands.registerCommand(
    "autoContinue.start",
    () => {
      startContinueMode();
      treeDataProvider.refresh();
    }
  );

  const stopCommand = vscode.commands.registerCommand(
    "autoContinue.stop",
    () => {
      stopContinueMode();
      treeDataProvider.refresh();
    }
  );

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
  const toggleCommand = vscode.commands.registerCommand(
    "autoContinue.toggle",
    () => {
      if (isRunning) {
        stopContinueMode();
      } else {
        startContinueMode();
      }
      treeDataProvider.refresh();
    }
  );

  context.subscriptions.push(startCommand, stopCommand, toggleCommand);
}

// Tree View Provider –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
class AutoContinueTreeProvider
  implements vscode.TreeDataProvider<AutoContinueItem>
{
  private _onDidChangeTreeData: vscode.EventEmitter<
    AutoContinueItem | undefined | null | void
  > = new vscode.EventEmitter<AutoContinueItem | undefined | null | void>();
  readonly onDidChangeTreeData: vscode.Event<
    AutoContinueItem | undefined | null | void
  > = this._onDidChangeTreeData.event;

  refresh(): void {
    this._onDidChangeTreeData.fire();
  }

  getTreeItem(element: AutoContinueItem): vscode.TreeItem {
    return element;
  }

  getChildren(): AutoContinueItem[] {
    const items: AutoContinueItem[] = [];

    // –°—Ç–∞—Ç—É—Å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    if (isRunning && startTime) {
      const elapsed = Math.floor((Date.now() - startTime.getTime()) / 1000);
      const minutes = Math.floor(elapsed / 60);
      const seconds = elapsed % 60;

      items.push(
        new AutoContinueItem(
          "üü¢ –†–ê–ë–û–¢–ê–ï–¢",
          `–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${minutes}–º ${seconds}—Å | –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageCount}`,
          vscode.TreeItemCollapsibleState.None
        )
      );
    } else {
      items.push(
        new AutoContinueItem(
          "‚≠ï –û–°–¢–ê–ù–û–í–õ–ï–ù",
          "–ù–∞–∂–º–∏—Ç–µ '–ó–ê–ü–£–°–¢–ò–¢–¨' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å",
          vscode.TreeItemCollapsibleState.None
        )
      );
    }

    // –ö—Ä—É–ø–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
    items.push(
      new AutoContinueItem(
        isRunning ? "üü¢ –ê–ö–¢–ò–í–ï–ù" : "‚≠ï –û–°–¢–ê–ù–û–í–õ–ï–ù",
        isRunning
          ? "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç"
          : "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
        vscode.TreeItemCollapsibleState.None
      )
    );

    // –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (isRunning) {
      items.push(
        new AutoContinueItem(
          "üõë –û–°–¢–ê–ù–û–í–ò–¢–¨",
          "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ",
          vscode.TreeItemCollapsibleState.None,
          {
            command: "autoContinue.stop",
            title: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
          }
        )
      );
    } else {
      items.push(
        new AutoContinueItem(
          "üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨",
          "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞",
          vscode.TreeItemCollapsibleState.None,
          {
            command: "autoContinue.start",
            title: "–ó–∞–ø—É—Å—Ç–∏—Ç—å",
          }
        )
      );
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–±—É–¥—É—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ)
    items.push(
      new AutoContinueItem(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "–ò–Ω—Ç–µ—Ä–≤–∞–ª: 10 —Å–µ–∫—É–Ω–¥ (–∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è)",
        vscode.TreeItemCollapsibleState.None
      )
    );

    // –ü–æ–º–æ—â—å
    items.push(
      new AutoContinueItem(
        "‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
        "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 'continue' –≤ —á–∞—Ç –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥",
        vscode.TreeItemCollapsibleState.None
      )
    );

    return items;
  }
}

class AutoContinueItem extends vscode.TreeItem {
  constructor(
    public readonly label: string,
    public readonly tooltip: string,
    public readonly collapsibleState: vscode.TreeItemCollapsibleState,
    public readonly command?: vscode.Command
  ) {
    super(label, collapsibleState);
    this.tooltip = tooltip;
    this.command = command;
  }
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ª—É—á—à–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
function startContinueMode() {
  if (isRunning) {
    vscode.window.showWarningMessage("‚ö†Ô∏è –ê–≤—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!");
    return;
  }

  isRunning = true;
  messageCount = 0;
  startTime = new Date();

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø—É—Å–∫–∞
  vscode.window.withProgress(
    {
      location: vscode.ProgressLocation.Notification,
      title: "üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...",
      cancellable: false,
    },
    async (progress) => {
      progress.report({ increment: 50, message: "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..." });

      await new Promise((resolve) => setTimeout(resolve, 1000));

      continueInterval = setInterval(() => {
        vscode.commands.executeCommand(
          "workbench.action.chat.open",
          "continue"
        );
        messageCount++;
        treeDataProvider.refresh(); // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
      }, 10000);

      // –û–±–Ω–æ–≤–ª—è—Ç—å –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
      setInterval(() => {
        if (isRunning) {
          treeDataProvider.refresh();
        }
      }, 1000);

      progress.report({ increment: 50, message: "–ì–æ—Ç–æ–≤–æ!" });
    }
  );

  vscode.window.showInformationMessage(
    "‚úÖ –ê–≤—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ! –ö–æ–º–∞–Ω–¥–∞ 'continue' –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥.",
    "–ü–æ–Ω—è—Ç–Ω–æ"
  );
}

function stopContinueMode() {
  if (!isRunning) {
    vscode.window.showWarningMessage("‚ö†Ô∏è –ê–≤—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
    return;
  }

  isRunning = false;
  if (continueInterval) {
    clearInterval(continueInterval);
    continueInterval = undefined;
  }

  vscode.window.showInformationMessage(
    "üõë –ê–≤—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
    "–ü–æ–Ω—è—Ç–Ω–æ"
  );
}

export function deactivate() {
  stopContinueMode();
  console.log("Auto Continue extension deactivated");
}
