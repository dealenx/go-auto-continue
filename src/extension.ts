// extension.ts
import * as vscode from "vscode";

let continueInterval: NodeJS.Timeout | undefined;
let isRunning = false;
let treeDataProvider: GoAutoContinueTreeProvider;

export function activate(context: vscode.ExtensionContext) {
  console.log("Go Auto Continue extension activated");

  // –°–æ–∑–¥–∞—Ç—å Tree View Provider
  treeDataProvider = new GoAutoContinueTreeProvider();
  vscode.window.createTreeView("goAutoContinueView", {
    treeDataProvider: treeDataProvider,
  });

  // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–º
  const startCommand = vscode.commands.registerCommand(
    "goAutoContinue.start",
    () => {
      startContinueMode();
      treeDataProvider.refresh();
    }
  );

  const stopCommand = vscode.commands.registerCommand(
    "goAutoContinue.stop",
    () => {
      stopContinueMode();
      treeDataProvider.refresh();
    }
  );

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
  const toggleCommand = vscode.commands.registerCommand(
    "goAutoContinue.toggle",
    () => {
      if (isRunning) {
        stopContinueMode();
      } else {
        startContinueMode();
      }
      treeDataProvider.refresh();
    }
  );

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const openSettingsCommand = vscode.commands.registerCommand(
    "goAutoContinue.openSettings",
    () => {
      vscode.commands.executeCommand(
        "workbench.action.openSettings",
        "goAutoContinue"
      );
    }
  );

  context.subscriptions.push(
    startCommand,
    stopCommand,
    toggleCommand,
    openSettingsCommand
  );

  // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const configChangeListener = vscode.workspace.onDidChangeConfiguration(
    (event) => {
      if (event.affectsConfiguration("goAutoContinue")) {
        treeDataProvider.refresh();

        // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        if (isRunning) {
          stopContinueMode();
          startContinueMode();
        }
      }
    }
  );

  context.subscriptions.push(configChangeListener);
}

// Tree View Provider –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
class GoAutoContinueTreeProvider
  implements vscode.TreeDataProvider<GoAutoContinueItem>
{
  private _onDidChangeTreeData: vscode.EventEmitter<
    GoAutoContinueItem | undefined | null | void
  > = new vscode.EventEmitter<GoAutoContinueItem | undefined | null | void>();
  readonly onDidChangeTreeData: vscode.Event<
    GoAutoContinueItem | undefined | null | void
  > = this._onDidChangeTreeData.event;

  refresh(): void {
    this._onDidChangeTreeData.fire();
  }

  getTreeItem(element: GoAutoContinueItem): vscode.TreeItem {
    return element;
  }

  getChildren(): GoAutoContinueItem[] {
    const items: GoAutoContinueItem[] = [];

    // –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (isRunning) {
      items.push(
        new GoAutoContinueItem(
          "üõë –û–°–¢–ê–ù–û–í–ò–¢–¨",
          "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ",
          vscode.TreeItemCollapsibleState.None,
          {
            command: "goAutoContinue.stop",
            title: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
          }
        )
      );
    } else {
      items.push(
        new GoAutoContinueItem(
          "üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨",
          "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞",
          vscode.TreeItemCollapsibleState.None,
          {
            command: "goAutoContinue.start",
            title: "–ó–∞–ø—É—Å—Ç–∏—Ç—å",
          }
        )
      );
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    const config = vscode.workspace.getConfiguration("goAutoContinue");
    const intervalSeconds = config.get<number>("interval", 10);
    const message = config.get<string>("message", "continue");

    items.push(
      new GoAutoContinueItem(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        `–ò–Ω—Ç–µ—Ä–≤–∞–ª: ${intervalSeconds}—Å | –§—Ä–∞–∑–∞: "${message}" | –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è`,
        vscode.TreeItemCollapsibleState.None,
        {
          command: "goAutoContinue.openSettings",
          title: "–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        }
      )
    );

    return items;
  }
}

class GoAutoContinueItem extends vscode.TreeItem {
  constructor(
    public readonly label: string,
    public readonly tooltip: string,
    public readonly collapsibleState: vscode.TreeItemCollapsibleState,
    public readonly command?: vscode.Command
  ) {
    super(label, collapsibleState);
    this.tooltip = tooltip;
    this.command = command;
  }
}

function startContinueMode() {
  if (isRunning) {
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const config = vscode.workspace.getConfiguration("goAutoContinue");
  const intervalSeconds = config.get<number>("interval", 10);
  const message = config.get<string>("message", "continue");

  isRunning = true;
  continueInterval = setInterval(() => {
    vscode.commands.executeCommand("workbench.action.chat.open", message);
  }, intervalSeconds * 1000); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã

  vscode.window.showInformationMessage(
    `üöÄ Go Auto Continue –∑–∞–ø—É—â–µ–Ω! –§—Ä–∞–∑–∞ "${message}" –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ ${intervalSeconds} —Å–µ–∫—É–Ω–¥.`
  );
  treeDataProvider.refresh();
}

function stopContinueMode() {
  if (!isRunning) {
    return;
  }

  isRunning = false;
  if (continueInterval) {
    clearInterval(continueInterval);
    continueInterval = undefined;
  }

  vscode.window.showInformationMessage("Go Auto Continue mode stopped!");
  treeDataProvider.refresh();
}

export function deactivate() {
  stopContinueMode();
  console.log("Go Auto Continue extension deactivated");
}
